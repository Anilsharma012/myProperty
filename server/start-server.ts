// server/start-server.ts
import { createServer, initializePushNotifications, initializePackageSync } from "./index";
import { ChatWebSocketServer } from "./websocket";
import { connectToDatabase } from "./db/mongodb";

function getPort(): number {
  const raw = process.env.PORT;
  const n = raw ? Number(raw) : NaN;
  if (!Number.isFinite(n) || n <= 0) {
    console.error("‚ùå PORT missing/invalid:", raw);
    process.exit(1);
  }
  return n;
}

async function connectDbWithTimeout(ms: number) {
  return Promise.race([
    (async () => {
      console.log("üîÑ DB: connecting‚Ä¶");
      await connectToDatabase();
      console.log("‚úÖ DB: connected");
    })(),
    new Promise((_, rej) =>
      setTimeout(() => rej(new Error(`DB connect timed out after ${ms}ms`)), ms)
    ),
  ]);
}

async function start() {
  console.log("üöÄ Boot v3: starting");

  const app = createServer();

  // üü¢ LISTEN IMMEDIATELY (Railway Edge ko yahi chahiye)
  const PORT = getPort();
  const server = app.listen(PORT, "0.0.0.0", () => {
    console.log(`‚úÖ HTTP listening PORT=${PORT}`);
  });

  // services
  try {
    initializePushNotifications(server);
    initializePackageSync(server);
    new ChatWebSocketServer(server);
    console.log("üí¨ WebSocket/services ready");
  } catch (e) {
    console.error("‚ö†Ô∏è Service init error:", e);
  }

  // DB background
  try {
    await connectDbWithTimeout(10_000);
  } catch (e: any) {
    console.error("‚ö†Ô∏è DB connect issue:", e?.message || e);
  }
}

start().catch((e) => {
  console.error("‚ùå Fatal:", e);
  process.exit(1);
});
